const express = require("express");
const multer = require("multer");
const path = require("path");
const fs = require("fs")
const { PrismaClient } = require("@prisma/client");
const prisma = new PrismaClient();
const {generateDemandePaiementPDF} =  require("../../utils/pdf")
const { 
    effectuerPaiement,
    getPaiementByDemande 
} = require("../../controllers/Paiements/paiementController");

const router = express.Router();
const upload = multer({ storage: multer.memoryStorage() });

// ‚úÖ Effectuer un paiement (avec preuve)
router.post("/effectuerPaiement/:demande_id", upload.array("preuvesPaiement"), effectuerPaiement);

// // ‚úÖ Modifier un paiement
// router.put("/:paiement_id", modifierPaiement);

// // ‚úÖ Supprimer un paiement (soft delete)
// router.delete("/:paiement_id", supprimerPaiement);

// // ‚úÖ R√©cup√©rer tous les paiements
// router.get("/", getPaiements);

// // ‚úÖ R√©cup√©rer un paiement d‚Äôune demande sp√©cifique
router.get("/:demande_id", getPaiementByDemande);


router.get("/download-pdf/:demande_id", async (req, res) => {
    try {
        const { demande_id } = req.params;

        // ‚úÖ V√©rification de l'ID de la demande
        if (!demande_id || isNaN(demande_id)) {
            return res.status(400).json({ message: "ID de demande invalide." });
        }

        console.log(`üîç R√©cup√©ration de la demande #${demande_id}`);

        // üîπ R√©cup√©ration de la demande de paiement avec les relations n√©cessaires
        const demande = await prisma.demandes_paiement.findUnique({
            where: { id: parseInt(demande_id) },
            include: {
                agents: true,
                validations: { include: { utilisateurs: true } },
                paiements: true,
            },
        });

        if (!demande) {
            console.error("‚ùå Demande non trouv√©e.");
            return res.status(404).json({ message: "Demande introuvable." });
        }

        const nbMentionSection = await prisma.validations.findFirst({
            where : {
                demande_id : parseInt(demande.id),
                utilisateurs : {
                    email : "sidoine@greenpayci.com"
                }
            },
            select : {commentaire : true}
        })
        if (nbMentionSection === null) {
            demande.nbMentionSection = "";
        }else{
            demande.nbMentionSection = nbMentionSection.commentaire
        }

        // console.log(demande)
        // console.log(demande)

        // üîπ Chemin s√©curis√© du fichier PDF
        const outputPath = path.resolve(__dirname, `../../public/pdfs/demande_paiement_${demande_id}.pdf`);
        console.log(`üìÑ G√©n√©ration du PDF : ${outputPath}`);

        // ‚úÖ G√©n√©ration du PDF
        await generateDemandePaiementPDF(demande, outputPath);

        // üîπ V√©rification que le fichier a bien √©t√© cr√©√©
        if (!fs.existsSync(outputPath)) {
            console.error("‚ùå Le fichier PDF n'a pas √©t√© g√©n√©r√© !");
            return res.status(500).json({ message: "Erreur lors de la g√©n√©ration du PDF." });
        }

        console.log(`‚úÖ PDF g√©n√©r√© avec succ√®s : ${outputPath}`);

        // üîπ Envoi du fichier au client
        res.download(outputPath, `demande_paiement_${demande_id}.pdf`, (err) => {
            if (err) {
                console.error("‚ùå Erreur lors du t√©l√©chargement du PDF :", err);
                return res.status(500).json({ message: "Erreur lors du t√©l√©chargement du fichier." });
            }
        });
    } catch (error) {
        console.error("‚ùå Erreur serveur :", error);
        res.status(500).json({ message: "Erreur serveur.", error });
    }
});
  

module.exports = router;

